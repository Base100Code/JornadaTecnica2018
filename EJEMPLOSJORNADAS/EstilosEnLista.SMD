CONSTANTS  begin
end
CLASSES BEGIN
	frm is Form begin
		objects begin
			gNumRows as Integer default 0
			InstruSelect as Char
			cellStyleIdx_1 as Integer
			cellStyleIdx_2 as Integer
			cellStyleIdx_3 as Integer
			cellStyleIdx_4 as Integer
			cellStyleIdx_5 as Integer
			cellStyleIdx_10 as Integer
			cellStyleIdx_12 as Integer
			cellStyleIdx_13 as Integer
			cellStyleIdx_14 as Integer
			cellStyleIdx_15 as Integer
			cellStyleIdx_11 as Integer
		end
		INTERFACE
			POSITION 0 0 937 542
			LABEL "List Styles"
			RESIZING
			MAXIMIZE
			MINIMIZE
			SYSMENU
		BEGIN
			CONTROL AS BOX
				POSITION 0 0 921 503
				FOREGROUND RGB 0 0 0
				ATTACH ALL
				NOLABEL
				NOBORDER
			BEGIN
				CONTROL AS TAB
					POSITION 9 8 904 464
					ATTACH ALL
					BORDER DOUBLE
					ICON FILE "listaiconosgif" CENTER
					NUMBER 1
						TAB LABEL "SetListColumnStyle / SetListCellStyle" ICON 42
				BEGIN
					CONTROL lstStrings AS LIST
						POSITION 0 0 768 415
						FONT "MS Sans Serif" 8  CHARSET Ansi 
						ATTACH ALL
						LABEL "State|Customer  |Order date |Pay date |Status |Nº line |Cod. Item |Description|Quantity|Discount|Price"
						BORDER DOUBLE DOWN
						ICON FILE "_MBSTDBMP_"
						LISTTYPE LISTCOLS 11
						SELECTTYPE SIMPLE
						SCROLL VERTICAL HORIZONTAL
					CONTROL AS BOX
						POSITION 786 264 104 131
						ATTACH TOP RIGHT
						NOLABEL
						BORDER ETCHED
					BEGIN
						CONTROL AS BUTTON
							POSITION 7 86 84 34
							LABEL "Export"
							COMMAND CmdExportListStrings
						CONTROL rb_exportStrings AS RADIO
							POSITION 6 11 87 63
							LABEL "Export Styles"
							BORDER ETCHED
							NUMBER 2 TAGS "No" "Yes"
					END
					CONTROL AS BOX
						POSITION 786 14 104 212
						ATTACH TOP RIGHT
						LABEL "Select option"
						BORDER ETCHED
					BEGIN
						CONTROL AS BUTTON
							POSITION 8 10 84 34
							ATTACH TOP RIGHT
							LABEL "Cells"
							COMMAND CmdEstilosCeldasStrings
						CONTROL AS BUTTON
							POSITION 8 48 84 34
							ATTACH TOP RIGHT
							LABEL "Conditionals"
							COMMAND CmdEstilosCondCeldasStrings
						CONTROL AS BUTTON
							POSITION 8 86 84 34
							ATTACH TOP RIGHT
							LABEL "Columns"
							COMMAND CmdEstilosColStrings
						CONTROL btnAlternate AS BUTTON
							POSITION 8 124 84 34
							ATTACH TOP RIGHT
							LABEL "Alternate"
						CONTROL AS BUTTON
							POSITION 8 162 84 34
							ATTACH TOP RIGHT
							LABEL "Reset Styles"
							COMMAND CmdResetStyleStrings
					END
				END
			END
		END
	end
END
CODE CLASS frm BEGIN
//{{CODEBEGIN
 On Open begin
    LoadList(lstStrings);
    
    CreateStyles(lstStrings);
end  


//Column styles
On Command CmdEstilosColStrings
begin
    //Column style
    lstStrings.SetListColumnStyle(2 ,cellStyleIdx_15);

    //Conditional Column style
    lstStrings.SetListColumnConditionalStyle(1 ,cellStyleIdx_14, "equalstring($1$, MA)" );
    

end

Private CreateStyles(pList as SimpleFormControl)
Objects begin
    nRow nCol as integer
end
begin
    cellStyleIdx_14 = pList.CreateListCellStyle("Arial;Size=9;underline", Module.Rgb(255,255,255), Module.Rgb(51,122,183), 0);
    cellStyleIdx_15 = pList.CreateListCellStyle("Currier;Size=9;italic;bold", Module.Rgb(255,255,255), Module.Rgb(217,83,79), 0);
end

//Cell Styles
On Command CmdEstilosCeldasStrings
begin
    CellStyles(lstStrings);
end

Private CellStyles(pList as SimpleFormControl)
Objects begin
    cellStyleIdx_16 as integer
end
begin
    cellStyleIdx_16 = pList.CreateListCellStyle("Verdana;Size=8;underline", Module.Rgb(255,255,255), Module.Rgb(92,184,92), 2);
    pList.SetListCellStyle(3,3,cellStyleIdx_16);
    pList.SetListCellStyle(5,3,cellStyleIdx_16);
    pList.SetListCellStyle(7,3,cellStyleIdx_16);
    pList.SetListCellStyle(9,3,cellStyleIdx_16);
    pList.SetListCellStyle(11,3,cellStyleIdx_16);
end


On Command CmdEstilosCondCeldasStrings
Objects begin   
    nRow nCol as integer
end
begin
    cellStyleIdx_10 = lstStrings.CreateListCellStyle("Times New Roman;Size=9", Module.Rgb(255, 255, 255), Module.Rgb(91,192,222), 2, 1);
    cellStyleIdx_11 = lstStrings.CreateListCellStyle("Times New Roman;Size=9", Module.Rgb(0,0,0), Module.Rgb(221,221,221), 2, 1);

    lstStrings.ResetListColumnStyles(11);
    for nRow = 1 to gNumRows do begin 
        lstStrings.SetListCellConditionalStyle(nRow,11 , cellStyleIdx_10, "$11$ >= 800");
        lstStrings.SetListCellConditionalStyle(nRow,11 , cellStyleIdx_11, "$11$ < 400");
    end    
end

Private LoadList ( pList as SimpleFormControl)
    Objects Begin
       
        icon as integer default 0
        texto as char
        valor as decimal
        InstruSelectString as char
    End
Begin
    pList.Reset();    
   
    pList.IconFile = "listaiconosgif";
    pList.FieldSeparator = "|";
    
    FormatListColumnChar(1, 9, pList); //State
    FormatListColumnChar(2, 35, pList); //Customer
    FormatListColumnDate(3, 15, pList);  //Date
    FormatListColumnDate(4, 15, pList);  //Date
    FormatListColumnChar(5, 8, pList);  //Status
    FormatListColumnNumeric(6,10, 0, pList); //line number
    pList.SetColumnVisible(6, FALSE);
    FormatListColumnNumeric(7, 10,0, pList); //Cod item
    FormatListColumnChar(8, 15, pList);  //Descripcion item
    FormatListColumnNumeric(9, 10 ,0, pList); //Quantity
    FormatListColumnNumeric(10, 10,0, pList); //discount
    FormatListColumnNumeric(11, 30, 2, pList); //Price     
    pList.SetColumnMask(11,4);

    InstruSelect = "select customers.state, customers.company , order_date, pay_date , order_status , "+
                    " line_nbr, orderlines.item, items.description,  quantity, discount, price " +
                    
                    " from orders, orderlines, items , customers"+
                        " where orders.order_nbr = orderlines.order_nbr and orderlines.item = items.item " +
                        " and orderlines.supplier = items.supplier and orders.customer = customers.customer order by line_nbr";

    LoadString( pList, InstruSelect );
    pList.NumericColumnsFormattedToChar(true);
End

Private LoadString(pList as SimpleFormControl, pInstruSelect as char)
Objects begin
    c as SqlCursor
    texto as Char
    customer line_nbr as integer 
    item  quantity discount as smallint
    order_date pay_date as date
    order_status   description as char
    price price2 price3 as decimal (12,2)
    company state as char
    i as integer default 0
    j as integer default 0
    lChIndice as char
    InstruSelectString as char
end
begin
    c.Prepare(pInstruSelect);
    c.Open;
    
    While c.Fetch(state, company , order_date, pay_date , order_status , line_nbr, item, 
                description,  quantity, discount, price ).Found
    Do begin
        texto = state + "|" +company +"|"+ order_date.char +"|"+ pay_date.char +"|"+ order_status +"|"+ line_nbr.Using(2) +"|"+ 
                item.Using(5) +"|"+ description +"|"+  quantity +"|"+ discount +"|"+ 
            price.Using(4) ;

        j = pList.AddString(texto, 0);
        ++i;
        pList.SetListInfo(j, j);
        ++gNumRows;
    end

    c.Close.Free;
end

//Column formating
Private FormatListColumnChar(pNumColumn as smallint, pLengthChar as smallint, pList as SimpleFormControl)
objects begin
end
Begin
    pList.SetColumnType(pNumColumn,0);
    pList.SetColumnAlign(pNumColumn,0);
    pList.SetColumnChars(pNumColumn,pLengthChar);
end

Private FormatListColumnNumeric(pNumColumn as smallint, pLengthColumns as smallint, pNumDec as smallint , pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,1); //Numeric
    if pNumDec > 0 then pList.SetColumnNumDec(pNumColumn, pNumDec); //DEcimales
    pList.SetColumnAlign(pNumColumn,2);//Izda
    pList.SetColumnChars(pNumColumn,pLengthColumns);
end

Private FormatListColumnDate(pNumColumn as smallint, pLengthColumns as smallint, pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,2); //Date
    pList.SetColumnAlign(pNumColumn,2);//Dcha
    pList.SetColumnChars(pNumColumn,pLengthColumns);

end
    

//List export
On Command CmdExportWithStyleString
begin
    ExportarListas(True, lstStrings);
end

On Command CmdExportWithoutStyleString
begin
    ExportarListas(false, lstStrings);
end

Private ExportarListas(ConStilo as boolean, pList as SimpleFormControl)
Objects begin
    lChName as char
end
begin
    if ConStilo then begin
        lChName = pList.Name()+"WithStyle";
    end
    else begin
        lChName = pList.Name()+"WithoutStyle";    
    end
    pList.AllowExportListCellStyles(ConStilo);
    pList.ExportToExcel((GetEnv("DBTEMP") +"\"+lChName+"Excel.xls"));
end

On Command CmdExportListStrings
begin
    if rb_exportStrings.Selected == 1 then begin
        SendCommand("CmdExportWithoutStyleString");
    end
    if rb_exportStrings.Selected == 2 then begin
        SendCommand("CmdExportWithStyleString");
    end
    

end

//Reset Styles
On Command CmdResetStyleStrings
Objects begin
    i as smallint
    nRow as integer
end
begin
    lstStrings.AlternateBackColor(Rgb(255, 255, 255),Rgb(255, 255, 255), 2);
    for nRow = 1 to gNumRows do begin
        for i = 1 to 11 do begin 
            if nRow == 1 then lstStrings.ResetListColumnStyles(i);
            lstStrings.ResetListCellStyles(nRow, i);
        end    
    end
    
end


On event Click control btnAlternate(e as event)
begin
    lstStrings.AlternateBackColor(Rgb(196, 196, 196), Rgb(255, 255, 255), 2);
end
//{{CODEEND
END
CODE BEGIN
//{{CODEBEGIN
main
objects
begin
      of as frm
      i dafaultRGB as integer
end
begin
    PutEnv("DRAWLISTLINES", "TRUE");
    PutEnv("DRAWTREELISTLINES", "TRUE");

   PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    
    of.Run();
    Sql.Disconnect();
end
//{{CODEEND
END

